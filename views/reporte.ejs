<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Directorio</title>
        <link rel="stylesheet" href="/css/output.css" />

        <style>
            body {
                background-color: #e4e8ee;
            }

            #container {
                position: relative;
                height: 500px;
                box-shadow: 1px 4px 8px rgba(36, 37, 42, 0.2);
            }

            #containerElements {
                overflow-y: auto;
                height: 100%;
            }

            #element {
                position: relative;
            }

            #main-content {
                transition: padding-left 0.3s ease;
                padding-left: 3.5rem;
            }

            .side:hover ~ #main-content {
                padding-left: 10rem;
            }
        </style>

        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script
            src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"
            integrity="sha512-t2JWqzirxOmR9MZKu+BMz0TNHe55G5BZ/tfTmXMlxpUY8tsTo3QMD27QGoYKZKFAraIPDhFv56HLdN11ctmiTQ=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"
        ></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.debug.js"></script>
    </head>
    <body style="overflow-x: hidden">
        <%- include('partials/sidebar.ejs') %>

        <div id="main-content" class="w-full ml-14 mt-8 pl-20 flex flex-col">
            <!-- Flex container for vertical alignment -->
            <h1
                class="mb-6 text-4xl font-semibold leading-none tracking-tight text-blue-600 md:text-3xl lg:text-3xl"
            >
                Reporte
            </h1>
            <div id="alertas">

            </div>
            <div class="flex flex-col">
                <div class="mb-4 flex flex-row space-between">
                    <form
                        action="/reporte"
                        method="GET"
                        class="flex flex-row gap-10"
                    >
                        <div>
                            <label for="dateSelector" class="mr-2"
                                >Inicio</label
                            >
                            <input
                                type="date"
                                id="dateStart"
                                required
                                class="px-2 py-1 border border-gray-300 rounded-md"
                                max="<%= new Date().toISOString().split('T')[0] %>"
                                onchange="validateDate()"
                            />
                        </div>
                        <div>
                            <label for="dateSelector" class="mr-2">Fin</label>
                            <input
                                type="date"
                                id="dateEnd"
                                required
                                class="px-2 py-1 border border-gray-300 rounded-md"
                                max="<%= new Date().toISOString().split('T')[0] %>"
                                onchange="validateDate()"
                            />
                        </div>
                        <div>
                            <button
                                type="button"
                                id="searchByDateBtn"
                                class="h-10 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 focus:outline-none"
                            >
                                Buscar por fecha
                            </button>
                            <button
                                type="button"
                                id="resetDateBtn"
                                class="h-10 text-blue-700 bg-white hover:bg-gray-200 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 focus:outline-none border border-blue-700"
                            >
                                Limpiar fechas
                            </button>
                        </div>
                    </form>
                </div>
                <div class="mb-4">
                    <label for="graphSelector" class="mr-2"
                        >Selecciona gráfica:</label
                    >
                    <select
                        id="graphSelector"
                        class="px-2 py-1 border border-gray-300 rounded-md"
                        onchange="selectGraph()"
                    >
                        <option value="graphOne">Leads por día</option>
                        <option value="graphTwo">
                            Cantidad de leads por año, por mes
                        </option>
                        <option value="graphThree">Leads por usuario</option>
                        <option value="graphFour">Leads por status</option>
                        <option value="graphFive">Graph Five</option>
                        <!-- Add more options for other graphs -->
                    </select>
                </div>
                <div class="ml-auto pr-20">
                    <form id="uploadForm" action="/reporte/save" method="POST" enctype="multipart/form-data">
                        <button 
                            onclick="descargarPDF()" 
                            type="button" 
                            class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
                        >   Generar PDF
                        </button>
                        <input id="_csrf" type="hidden" name="_csrf" value="<%= csrfToken %>" >
                    </form>
                </div>
            </div>

            <div
                id="graphOneContainer"
                class="graph-container w-3/4 px-4 py-8 ml-32"
            >
                <canvas id="graphOne" width="400" height="200"></canvas>
            </div>
            <div
                id="graphTwoContainer"
                class="graph-container w-3/4 px-4 py-8 ml-32"
                style="display: none"
            >
                <canvas id="graphTwo" width="400" height="200"></canvas>
            </div>
            <div
                id="graphThreeContainer"
                class="graph-container w-3/4 px-4 py-8 ml-32"
                style="display: none"
            >
                <canvas id="graphThree" width="400" height="200"></canvas>
            </div>
            <div
                id="graphFourContainer"
                class="graph-container w-3/4 px-4 py-8 ml-32"
                style="display: none; width: 50%; height: 50%"
            >
                <canvas id="graphFour" width="400" height="200"></canvas>
            </div>
            <div
                id="graphFiveContainer"
                class="graph-container w-3/4 px-4 py-8 ml-32"
                style="display: none"
            >
                <canvas id="graphFive" width="400" height="200"></canvas>
            </div>
        </div>
    </body>

    <script defer>
        const getData = (dateStart = '', dateEnd = '') => {

            const url = dateStart && dateEnd ? `/reporte/json?dateStart=${dateStart}&dateEnd=${dateEnd}` : `/reporte/json`;

            fetch(url, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                },
            })
                .then((result) => {
                    if (!result.ok) {
                        throw new Error("Network response was not ok");
                    }
                    return result.json();
                })
                .then((data) => {
                    console.log(data);
                    Object.keys(data).forEach((key) => {
                        const graphData = data[key];

                        // Leads promedio por día

                        if (key === "graph1Data") {
                            const leadsPorDia = {};

                            graphData.forEach((item) => {
                                let fecha = item.Fecha;
                                let leads = item.Leads;

                                if (!leadsPorDia[fecha]) {
                                    leadsPorDia[fecha] = [];
                                }
                                leadsPorDia[fecha].push(leads);
                            });

                            let promedioLeadsPorDia = {};
                            Object.keys(leadsPorDia).forEach((fecha) => {
                                let totalLeads = leadsPorDia[fecha].reduce(
                                    (acc, val) => {
                                        return acc + val;
                                    },
                                    0
                                );

                                let promedioLeads =
                                    totalLeads / leadsPorDia[fecha].length;
                                promedioLeadsPorDia[fecha] = promedioLeads;
                            });

                            // Datos para Chart JS
                            let fechas = Object.keys(promedioLeadsPorDia);
                            let leads = fechas.map((fecha) => {
                                return promedioLeadsPorDia[fecha];
                            });

                            // Destruir gráfica si ya existe
                            let chart_1 = Chart.getChart("graphOne");
                            if (chart_1) chart_1.destroy();

                            // Instancia de Chart JS
                            let ctx1 = document
                                .getElementById("graphOne")
                                .getContext("2d");
                            chart_1 = new Chart(ctx1, {
                                type: "line",
                                data: {
                                    labels: fechas,
                                    datasets: [
                                        {
                                            label: "Leads por día",
                                            data: leads,
                                            backgroundColor:
                                                "rgba(54, 162, 235, 0.2)",
                                            borderColor:
                                                "rgba(54, 162, 235, 1)",
                                            borderWidth: 1,
                                            lineTension: 0.4,
                                        },
                                    ],
                                },
                                options: {
                                    scales: {
                                        y: {
                                            ticks: {
                                                beginAtZero: true,
                                            },
                                        },
                                        x: {
                                            ticks: {
                                                autoSkip: true,
                                                maxRotation: 90,
                                                minRotation: 90,
                                            },
                                            display: true,
                                            min: 50,
                                            max: 150,
                                        },
                                    },
                                },
                                plugins: [colorFondo],
                            });
                        }

                        // Leads promedio por mes y año

                        if (key === "graph2Data") {
                            // Meses
                            const mesesStrings = [
                                "Enero",
                                "Febrero",
                                "Marzo",
                                "Abril",
                                "Mayo",
                                "Junio",
                                "Julio",
                                "Agosto",
                                "Septiembre",
                                "Octubre",
                                "Noviembre",
                                "Diciembre",
                            ];

                            // Arreglos para letiables

                            let anios = [];
                            let meses = [];
                            let leadPorAnioMes = [];

                            // Iterar JSON

                            graphData.forEach((item) => {
                                let anio = item.Anio;
                                let mes = item.Mes;
                                let leads = item.NoLeads;

                                if (!anios.includes(anio)) {
                                    anios.push(anio);
                                }
                                if (!meses.includes(mes)) {
                                    meses.push(mes);
                                }
                                if (!leadPorAnioMes[anio]) {
                                    leadPorAnioMes[anio] = {};
                                }

                                leadPorAnioMes[anio][mes] = leads;
                            });

                            // Sort de meses y años
                            anios.sort((a, b) => parseInt(a) - parseInt(b));
                            meses.sort((a, b) => parseInt(a) - parseInt(b));

                            let datasets = anios.map((anio) => {
                                let data = meses.map((mes) => {
                                    return leadPorAnioMes[anio][mes] || 0; // Default 0 si no hay leads en un mes
                                });

                                return {
                                    label: anio,
                                    data: data,
                                    backgroundColor: getRandomColor(),
                                    stack: "Stack 0",
                                };
                            });

                            // Destruir gráfica si ya existe
                            let chart_2 = Chart.getChart("graphTwo");
                            if (chart_2) chart_2.destroy();

                            // Instancia de Chart JS
                            let ctx2 = document
                                .getElementById("graphTwo")
                                .getContext("2d");
                            chart_2 = new Chart(ctx2, {
                                type: "bar",
                                data: {
                                    labels: meses.map((mes) => {
                                        return mesesStrings[mes - 1];
                                    }),
                                    datasets: datasets,
                                },
                                options: {
                                    scales: {
                                        x: {
                                            stacked: true,
                                            ticks: {
                                                beginAtZero: true,
                                            },
                                        },
                                        y: {
                                            stacked: true,
                                            ticks: {
                                                beginAtZero: true,
                                            },
                                        },
                                    },
                                },
                            });

                            function getRandomColor() {
                                // Rango de HUES
                                let blue = Math.floor(Math.random() * 256);
                                let green = Math.floor(
                                    Math.random() * (blue + 1)
                                );

                                let blueHex = blue
                                    .toString(16)
                                    .padStart(2, "0");
                                let greenHex = green
                                    .toString(16)
                                    .padStart(2, "0");

                                // Construir HEX
                                let color = "#" + "00" + greenHex + blueHex;

                                return color;
                            }
                        }

                        // Leads asignados por usuario

                        if (key === "graph3Data") {
                            let leadsPorUsuario = {};

                            graphData.forEach((item) => {
                                let usuario = item.Asignadoa;
                                let leads = item.LeadsPorUsuario;

                                if (!leadsPorUsuario[usuario]) {
                                    leadsPorUsuario[usuario] = 0;
                                }

                                leadsPorUsuario[usuario] += leads;
                            });

                            // Ordenar por cantidad de leads
                            leadsPorUsuario = Object.keys(leadsPorUsuario)
                                .sort((a, b) => {
                                    return (
                                        leadsPorUsuario[b] - leadsPorUsuario[a]
                                    );
                                })
                                .reduce((acc, key) => {
                                    acc[key] = leadsPorUsuario[key];
                                    return acc;
                                }, {});

                            // Destruir gráfica si ya existe
                            let chart_3 = Chart.getChart("graphThree");
                            if (chart_3) chart_3.destroy();

                            // Instancia de Chart JS
                            let ctx3 = document
                                .getElementById("graphThree")
                                .getContext("2d");
                            chart_3 = new Chart(ctx3, {
                                type: "bar",
                                data: {
                                    labels: Object.keys(leadsPorUsuario).map(
                                        (usuario) => {
                                            return usuario;
                                        }
                                    ),
                                    datasets: [
                                        {
                                            label: "Leads por usuario",
                                            data: Object.values(
                                                leadsPorUsuario
                                            ),
                                            backgroundColor: Object.keys(
                                                leadsPorUsuario
                                            ).map((usuario) => {
                                                return getRandomColor();
                                            }),
                                        },
                                    ],
                                },
                                options: {
                                    indexAxis: "y",
                                    responsive: true,
                                    title: {
                                        text: "New Bar Chart",
                                        display: true,
                                    },
                                },
                            });

                            function getRandomColor() {
                                // Rango de HUES
                                let blue = Math.floor(Math.random() * 256);
                                let green = Math.floor(
                                    Math.random() * (blue + 1)
                                );

                                let blueHex = blue
                                    .toString(16)
                                    .padStart(2, "0");
                                let greenHex = green
                                    .toString(16)
                                    .padStart(2, "0");

                                // Construir HEX
                                let color = "#" + "00" + greenHex + blueHex;

                                return color;
                            }
                        }

                        // Gráfica por status

                        if (key === "graph4Data") {
                            let leadsPorStatus = {};

                            graphData.forEach((item) => {
                                let status = item.Status;
                                let leads = item.Cantidad;

                                if (!leadsPorStatus[status]) {
                                    leadsPorStatus[status] = [];
                                }
                                leadsPorStatus[status].push(leads);
                            });

                            // Destruir gráfica si ya existe
                            let chart_4 = Chart.getChart("graphFour");
                            if (chart_4) chart_4.destroy();

                            // Instancia de Chart JS
                            let ctx4 = document
                                .getElementById("graphFour")
                                .getContext("2d");
                            chart_4 = new Chart(ctx4, {
                                type: "doughnut",
                                data: {
                                    labels: Object.keys(leadsPorStatus),
                                    datasets: [
                                        {
                                            label: "Leads por status",
                                            data: Object.values(leadsPorStatus),
                                            backgroundColor: Object.keys(
                                                leadsPorStatus
                                            ).map((status) => {
                                                return getRandomColor();
                                            }),
                                        },
                                    ],
                                },
                                options: {
                                    responsive: true,
                                    plugins: {
                                        legend: {
                                            position: "top",
                                        },
                                        title: {
                                            display: true,
                                            text: "Leads por status",
                                        },
                                    },
                                },
                            });

                            function getRandomColor() {
                                // Rango de HUES
                                let blue = Math.floor(Math.random() * 256);
                                let green = Math.floor(
                                    Math.random() * (blue + 1)
                                );

                                let blueHex = blue
                                    .toString(16)
                                    .padStart(2, "0");
                                let greenHex = green
                                    .toString(16)
                                    .padStart(2, "0");

                                // Construir HEX
                                let color = "#" + "00" + greenHex + blueHex;

                                return color;
                            }
                        }

                        // Gráfica por embudo

                        if (key === "graph5Data") {
                        }
                    });
                });
        };

        const selectGraph = () => {
            const graficaSeleccionada =
                document.getElementById("graphSelector").value;
            const contenedorGraficas =
                document.querySelectorAll(".graph-container");

            contenedorGraficas.forEach((container) => {
                container.style.display = "none"; // Hide all graph containers
            });

            const contenedorSeleccionado = document.getElementById(
                graficaSeleccionada + "Container"
            );
            contenedorSeleccionado.style.display = "block"; // Show the selected graph container
        };

        const descargarPDF = () => {
            const canvas = document.getElementById("graphOne");

            const imagenUno = canvas.toDataURL("image/jpeg", 1.0);
            const pdf = new jsPDF("landscape");
            pdf.setFontSize(20);
            pdf.addImage(imagenUno, "JPEG", 15, 15, 280, 150);
            pdf.save(`reporte.pdf`);

            const pdfData = pdf.output('datauristring');
            console.log("Esto es pdfData: ", pdfData);

            // Convert the PDF to a base64 string
            const pdfBase64 = pdf.output('datauristring').split(',')[1];

            const csrf = document.getElementById('_csrf').value;
            fetch('/reporte/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'csrf-token': csrf,
                },
                body: JSON.stringify({ pdfData: pdfBase64}),
                })
                .then((res) => {
                    if (!res.ok) {
                        throw new Error('Respuesta de red no está bien');
                    }
                    return res.json();
                })
                .then((data) => {
                    console.log("Esto es data", data);
                    operacionExitosa(data.message);
                    
                })
                .catch((error) => {
                    console.log(error);
                })

        }

        const colorFondo = {
            id: "colorFondo",
            beforeDraw: (chart, options) => {
                const { ctx, width, height } = chart;
                ctx.fillStyle = "#e4e8ee";
                ctx.fillRect(0, 0, width, height);
                ctx.restore();
            },
        };

        const validateDate = () => {
            const startDate = document.getElementById("dateStart");
            const endDate = document.getElementById("dateEnd");

            if (startDate.value && !endDate.value) {
                endDate.min = startDate.value;
                startDate.max = "";
            }

            if (!startDate.value && endDate.value) {
                startDate.max = endDate.value;
                endDate.min = "";
            }

            if (startDate.value && endDate.value) {
                endDate.min = startDate.value;
                startDate.max = endDate.value;
            }

            if (!startDate.value && !endDate.value) {
                startDate.max = new Date().toISOString().split("T")[0];
                endDate.max = new Date().toISOString().split("T")[0];
            }
        };

        // Cargar gráficas por defecto

        document.addEventListener("DOMContentLoaded", () => {
            getData();
        });

        // Cargar gráficas con fecha

        document.getElementById("searchByDateBtn").addEventListener("click", () => {
            
            // Obtener fechas de los inputs
            const dateStart = document.getElementById("dateStart").value;
            const dateEnd = document.getElementById("dateEnd").value;

            // Obtener datos con fechas y cargar gráficas
            getData(dateStart, dateEnd);
        });

        // Limpiar fechas

        document.getElementById("resetDateBtn").addEventListener("click", () => {
            document.getElementById("dateStart").value = "";
            document.getElementById("dateEnd").value = "";
            getData();
        });
        
    </script>

    <script>
        function operacionExitosa(accion) {
        const alertas = document.getElementById('alertas');
            const alertHTML = `
                <div id="alert-success" class="flex relative items-center p-4 mb-4 text-sm mr-24 text-green-800 border border-green-300 rounded-lg bg-green-50 w-2/3">
                    <button type="button" class="absolute top-2 right-2 text-gray-400 hover:text-gray-900" onclick="cerrarAlert()">
                        <svg class="w-6 h-6" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M5.293 5.293a1 1 0 011.414 0L10 8.586l3.293-3.293a1 1 0 111.414 1.414L11.414 10l3.293 3.293a1 1 0 01-1.414 1.414L10 11.414l-3.293 3.293a1 1 0 01-1.414-1.414L8.586 10 5.293 6.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                    <div>
                        <span class="font-bold"> ¡Acción exitosa! </span> 
                        <span id="success-message">${accion}</span>
                    </div>
                </div>
            `;
            alertas.innerHTML = alertHTML;
            document.getElementById('alert-success').style.display = 'block';
        }

        function cerrarAlert() {
            const successAlert = document.getElementById('alert-success');
            successAlert.parentNode.removeChild(successAlert);
        }
    </script>
</html>
